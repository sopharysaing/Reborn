/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package form;

import java.awt.Color;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileFilter;
import java.io.FileInputStream;
import java.sql.ResultSet;
import java.sql.Statement;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import plugin.Data;

/**
 *
 * @author MacBookPro
 */
public class Test extends javax.swing.JFrame {

    /**
     * Creates new form CreateMovie
     */
    public Test() {
        initComponents();
        txtMovieTitle.setForeground(new Color(153,153,153));
        txtRunningTime.setForeground(new Color(153,153,153));
        txtYearReleased.setForeground(new Color(153,153,153));
        txtDirector.setForeground(new Color(153,153,153));
        txtActor.setForeground(new Color(153,153,153));
        txtSource.setForeground(new Color(153,153,153));
        txtDescription.setForeground(new Color (153,153,153));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtMovieTitle = new javax.swing.JTextField();
        txtDirector = new javax.swing.JTextField();
        txtActor = new javax.swing.JTextField();
        txtSource = new javax.swing.JTextField();
        cbSelectStatus = new javax.swing.JComboBox<>();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        chb2D = new javax.swing.JCheckBox();
        chb3D = new javax.swing.JCheckBox();
        chb4DX = new javax.swing.JCheckBox();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        chbAction = new javax.swing.JCheckBox();
        chbAdventure = new javax.swing.JCheckBox();
        chbAnimation = new javax.swing.JCheckBox();
        chbComedy = new javax.swing.JCheckBox();
        chbDrama = new javax.swing.JCheckBox();
        chbHistorical = new javax.swing.JCheckBox();
        chbHorror = new javax.swing.JCheckBox();
        chbMusical = new javax.swing.JCheckBox();
        chbRomance = new javax.swing.JCheckBox();
        chbSciFi = new javax.swing.JCheckBox();
        jPanel4 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        chbLanKhmer = new javax.swing.JCheckBox();
        chbLanEnglish = new javax.swing.JCheckBox();
        jPanel5 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        chbSubKhmer = new javax.swing.JCheckBox();
        chbSubEnglish = new javax.swing.JCheckBox();
        jPanel6 = new javax.swing.JPanel();
        btnInsertPoster = new javax.swing.JButton();
        btnCreate = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtDescription = new javax.swing.JTextArea();
        jLabel7 = new javax.swing.JLabel();
        txtRunningTime = new textfieldformajorcineplex.TextFieldForMajorCineplex();
        txtYearReleased = new textfieldformajorcineplex.TextFieldForMajorCineplex();
        jDesktopPane1 = new javax.swing.JDesktopPane();
        lbMoviePoster = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Create Movie");
        setAlwaysOnTop(true);
        setResizable(false);
        addWindowFocusListener(new java.awt.event.WindowFocusListener() {
            public void windowGainedFocus(java.awt.event.WindowEvent evt) {
                formWindowGainedFocus(evt);
            }
            public void windowLostFocus(java.awt.event.WindowEvent evt) {
            }
        });
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        txtMovieTitle.setFont(new java.awt.Font("Calibri", 1, 16)); // NOI18N
        txtMovieTitle.setForeground(new java.awt.Color(153, 153, 153));
        txtMovieTitle.setText("Movie Title");
        txtMovieTitle.setCaretColor(new java.awt.Color(51, 51, 51));
        txtMovieTitle.setMargin(new java.awt.Insets(2, 10, 2, 10));
        txtMovieTitle.setPreferredSize(new java.awt.Dimension(200, 45));
        txtMovieTitle.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtMovieTitleFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtMovieTitleFocusLost(evt);
            }
        });
        txtMovieTitle.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtMovieTitleKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtMovieTitleKeyTyped(evt);
            }
        });

        txtDirector.setFont(new java.awt.Font("Calibri", 1, 16)); // NOI18N
        txtDirector.setForeground(new java.awt.Color(153, 153, 153));
        txtDirector.setText("Director");
        txtDirector.setCaretColor(new java.awt.Color(51, 51, 51));
        txtDirector.setMargin(new java.awt.Insets(2, 10, 2, 10));
        txtDirector.setPreferredSize(new java.awt.Dimension(200, 45));
        txtDirector.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtDirectorFocusLost(evt);
            }
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtDirectorFocusGained(evt);
            }
        });
        txtDirector.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtDirectorKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtDirectorKeyTyped(evt);
            }
        });

        txtActor.setFont(new java.awt.Font("Calibri", 1, 16)); // NOI18N
        txtActor.setForeground(new java.awt.Color(153, 153, 153));
        txtActor.setText("Actor");
        txtActor.setCaretColor(new java.awt.Color(51, 51, 51));
        txtActor.setMargin(new java.awt.Insets(2, 10, 2, 10));
        txtActor.setPreferredSize(new java.awt.Dimension(200, 45));
        txtActor.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtActorFocusLost(evt);
            }
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtActorFocusGained(evt);
            }
        });
        txtActor.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtActorKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtActorKeyTyped(evt);
            }
        });

        txtSource.setFont(new java.awt.Font("Calibri", 1, 16)); // NOI18N
        txtSource.setForeground(new java.awt.Color(153, 153, 153));
        txtSource.setText("Source");
        txtSource.setCaretColor(new java.awt.Color(51, 51, 51));
        txtSource.setMargin(new java.awt.Insets(2, 10, 2, 10));
        txtSource.setPreferredSize(new java.awt.Dimension(200, 45));
        txtSource.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtSourceFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtSourceFocusLost(evt);
            }
        });
        txtSource.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtSourceKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtSourceKeyTyped(evt);
            }
        });

        cbSelectStatus.setFont(new java.awt.Font("Calibri", 1, 16)); // NOI18N
        cbSelectStatus.setForeground(new java.awt.Color(51, 51, 51));
        cbSelectStatus.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "   Status", "   Available Now", "   Coming soon" }));
        cbSelectStatus.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        cbSelectStatus.setFocusable(false);
        cbSelectStatus.setPreferredSize(new java.awt.Dimension(200, 50));

        jPanel1.setBackground(new java.awt.Color(204, 204, 204));

        jLabel2.setFont(new java.awt.Font("Calibri", 1, 16)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(51, 51, 51));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Movie Type");
        jLabel2.setPreferredSize(new java.awt.Dimension(100, 50));

        chb2D.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        chb2D.setForeground(new java.awt.Color(51, 51, 51));
        chb2D.setText("2D");
        chb2D.setContentAreaFilled(false);
        chb2D.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        chb2D.setFocusable(false);
        chb2D.setIconTextGap(10);

        chb3D.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        chb3D.setForeground(new java.awt.Color(51, 51, 51));
        chb3D.setText("3D");
        chb3D.setContentAreaFilled(false);
        chb3D.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        chb3D.setFocusable(false);
        chb3D.setIconTextGap(10);

        chb4DX.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        chb4DX.setForeground(new java.awt.Color(51, 51, 51));
        chb4DX.setText("4DX");
        chb4DX.setContentAreaFilled(false);
        chb4DX.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        chb4DX.setFocusable(false);
        chb4DX.setIconTextGap(10);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(chb2D)
                .addGap(36, 36, 36)
                .addComponent(chb3D)
                .addGap(36, 36, 36)
                .addComponent(chb4DX)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(chb2D)
                .addComponent(chb3D)
                .addComponent(chb4DX))
        );

        jPanel2.setBackground(new java.awt.Color(204, 204, 204));
        jPanel2.setPreferredSize(new java.awt.Dimension(100, 100));

        jLabel3.setFont(new java.awt.Font("Calibri", 1, 16)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(51, 51, 51));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Genre");
        jLabel3.setPreferredSize(new java.awt.Dimension(100, 50));

        chbAction.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        chbAction.setForeground(new java.awt.Color(51, 51, 51));
        chbAction.setText("Action");
        chbAction.setContentAreaFilled(false);
        chbAction.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        chbAction.setFocusable(false);
        chbAction.setIconTextGap(10);

        chbAdventure.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        chbAdventure.setForeground(new java.awt.Color(51, 51, 51));
        chbAdventure.setText("Adventure");
        chbAdventure.setContentAreaFilled(false);
        chbAdventure.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        chbAdventure.setFocusable(false);
        chbAdventure.setIconTextGap(10);

        chbAnimation.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        chbAnimation.setForeground(new java.awt.Color(51, 51, 51));
        chbAnimation.setText("Animation");
        chbAnimation.setContentAreaFilled(false);
        chbAnimation.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        chbAnimation.setFocusable(false);
        chbAnimation.setIconTextGap(10);

        chbComedy.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        chbComedy.setForeground(new java.awt.Color(51, 51, 51));
        chbComedy.setText("Comedy");
        chbComedy.setContentAreaFilled(false);
        chbComedy.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        chbComedy.setFocusable(false);
        chbComedy.setIconTextGap(10);

        chbDrama.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        chbDrama.setForeground(new java.awt.Color(51, 51, 51));
        chbDrama.setText("Drama");
        chbDrama.setContentAreaFilled(false);
        chbDrama.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        chbDrama.setFocusable(false);
        chbDrama.setIconTextGap(10);

        chbHistorical.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        chbHistorical.setForeground(new java.awt.Color(51, 51, 51));
        chbHistorical.setText("Historical");
        chbHistorical.setContentAreaFilled(false);
        chbHistorical.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        chbHistorical.setFocusable(false);
        chbHistorical.setIconTextGap(10);

        chbHorror.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        chbHorror.setForeground(new java.awt.Color(51, 51, 51));
        chbHorror.setText("Horror");
        chbHorror.setContentAreaFilled(false);
        chbHorror.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        chbHorror.setFocusable(false);
        chbHorror.setIconTextGap(10);

        chbMusical.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        chbMusical.setForeground(new java.awt.Color(51, 51, 51));
        chbMusical.setText("Musical");
        chbMusical.setContentAreaFilled(false);
        chbMusical.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        chbMusical.setFocusable(false);
        chbMusical.setIconTextGap(10);

        chbRomance.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        chbRomance.setForeground(new java.awt.Color(51, 51, 51));
        chbRomance.setText("Romance");
        chbRomance.setContentAreaFilled(false);
        chbRomance.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        chbRomance.setFocusable(false);
        chbRomance.setIconTextGap(10);

        chbSciFi.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        chbSciFi.setForeground(new java.awt.Color(51, 51, 51));
        chbSciFi.setText("Sci-Fi");
        chbSciFi.setContentAreaFilled(false);
        chbSciFi.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        chbSciFi.setFocusable(false);
        chbSciFi.setIconTextGap(10);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(chbAction)
                        .addGap(18, 18, 18)
                        .addComponent(chbAdventure)
                        .addGap(18, 18, 18)
                        .addComponent(chbAnimation)
                        .addGap(18, 18, 18)
                        .addComponent(chbComedy)
                        .addGap(18, 18, 18)
                        .addComponent(chbDrama))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(chbHistorical)
                        .addGap(18, 18, 18)
                        .addComponent(chbHorror)
                        .addGap(18, 18, 18)
                        .addComponent(chbMusical)
                        .addGap(18, 18, 18)
                        .addComponent(chbRomance)
                        .addGap(18, 18, 18)
                        .addComponent(chbSciFi)))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 106, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chbAction)
                    .addComponent(chbAdventure)
                    .addComponent(chbAnimation)
                    .addComponent(chbComedy)
                    .addComponent(chbDrama))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chbHistorical)
                    .addComponent(chbHorror)
                    .addComponent(chbMusical)
                    .addComponent(chbRomance)
                    .addComponent(chbSciFi))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel4.setBackground(new java.awt.Color(204, 204, 204));
        jPanel4.setPreferredSize(new java.awt.Dimension(318, 50));

        jLabel5.setFont(new java.awt.Font("Calibri", 1, 16)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(51, 51, 51));
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Language");
        jLabel5.setPreferredSize(new java.awt.Dimension(100, 50));

        chbLanKhmer.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        chbLanKhmer.setForeground(new java.awt.Color(51, 51, 51));
        chbLanKhmer.setText("Khmer");
        chbLanKhmer.setContentAreaFilled(false);
        chbLanKhmer.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        chbLanKhmer.setFocusable(false);
        chbLanKhmer.setIconTextGap(10);

        chbLanEnglish.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        chbLanEnglish.setForeground(new java.awt.Color(51, 51, 51));
        chbLanEnglish.setText("English");
        chbLanEnglish.setContentAreaFilled(false);
        chbLanEnglish.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        chbLanEnglish.setFocusable(false);
        chbLanEnglish.setIconTextGap(10);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 24, Short.MAX_VALUE)
                .addComponent(chbLanKhmer)
                .addGap(18, 18, 18)
                .addComponent(chbLanEnglish)
                .addContainerGap(28, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(chbLanKhmer)
                .addComponent(chbLanEnglish))
        );

        jPanel5.setBackground(new java.awt.Color(204, 204, 204));
        jPanel5.setPreferredSize(new java.awt.Dimension(318, 50));

        jLabel6.setFont(new java.awt.Font("Calibri", 1, 16)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(51, 51, 51));
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("Subtitle");
        jLabel6.setPreferredSize(new java.awt.Dimension(100, 50));

        chbSubKhmer.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        chbSubKhmer.setForeground(new java.awt.Color(51, 51, 51));
        chbSubKhmer.setText("Khmer");
        chbSubKhmer.setContentAreaFilled(false);
        chbSubKhmer.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        chbSubKhmer.setFocusable(false);
        chbSubKhmer.setIconTextGap(10);
        chbSubKhmer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chbSubKhmerActionPerformed(evt);
            }
        });

        chbSubEnglish.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        chbSubEnglish.setForeground(new java.awt.Color(51, 51, 51));
        chbSubEnglish.setText("English");
        chbSubEnglish.setContentAreaFilled(false);
        chbSubEnglish.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        chbSubEnglish.setFocusable(false);
        chbSubEnglish.setIconTextGap(10);
        chbSubEnglish.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chbSubEnglishActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(chbSubKhmer)
                .addGap(18, 18, 18)
                .addComponent(chbSubEnglish)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(chbSubKhmer)
                .addComponent(chbSubEnglish))
        );

        btnInsertPoster.setFont(new java.awt.Font("Calibri", 1, 16)); // NOI18N
        btnInsertPoster.setForeground(new java.awt.Color(51, 51, 51));
        btnInsertPoster.setText("Insert Poster");
        btnInsertPoster.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnInsertPoster.setFocusable(false);
        btnInsertPoster.setPreferredSize(new java.awt.Dimension(150, 50));
        btnInsertPoster.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInsertPosterActionPerformed(evt);
            }
        });

        btnCreate.setFont(new java.awt.Font("Calibri", 1, 16)); // NOI18N
        btnCreate.setForeground(new java.awt.Color(51, 51, 51));
        btnCreate.setText("Create");
        btnCreate.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnCreate.setFocusable(false);
        btnCreate.setPreferredSize(new java.awt.Dimension(150, 50));
        btnCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateActionPerformed(evt);
            }
        });

        btnClear.setFont(new java.awt.Font("Calibri", 1, 16)); // NOI18N
        btnClear.setForeground(new java.awt.Color(51, 51, 51));
        btnClear.setText("Clear");
        btnClear.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnClear.setFocusable(false);
        btnClear.setPreferredSize(new java.awt.Dimension(150, 50));
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap(28, Short.MAX_VALUE)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCreate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnInsertPoster, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(29, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(btnInsertPoster, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 178, Short.MAX_VALUE)
                .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnCreate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        txtDescription.setFont(new java.awt.Font("Calibri", 1, 16)); // NOI18N
        txtDescription.setForeground(new java.awt.Color(153, 153, 153));
        txtDescription.setLineWrap(true);
        txtDescription.setRows(1);
        txtDescription.setTabSize(4);
        txtDescription.setText("Description");
        txtDescription.setMargin(new java.awt.Insets(10, 10, 10, 10));
        txtDescription.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtDescriptionFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtDescriptionFocusLost(evt);
            }
        });
        txtDescription.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtDescriptionKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtDescriptionKeyTyped(evt);
            }
        });
        jScrollPane1.setViewportView(txtDescription);

        jLabel7.setFont(new java.awt.Font("Calibri", 1, 16)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(51, 51, 51));
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("minutes");
        jLabel7.setPreferredSize(new java.awt.Dimension(100, 50));

        txtRunningTime.setText("Running Time");
        txtRunningTime.setNumber(true);
        txtRunningTime.setPreferredSize(new java.awt.Dimension(125, 45));
        txtRunningTime.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtRunningTimeFocusLost(evt);
            }
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtRunningTimeFocusGained(evt);
            }
        });
        txtRunningTime.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtRunningTimeKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtRunningTimeKeyTyped(evt);
            }
        });

        txtYearReleased.setText("Year Released");
        txtYearReleased.setNumber(true);
        txtYearReleased.setPreferredSize(new java.awt.Dimension(125, 45));
        txtYearReleased.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtYearReleasedFocusLost(evt);
            }
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtYearReleasedFocusGained(evt);
            }
        });
        txtYearReleased.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtYearReleasedKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtYearReleasedKeyTyped(evt);
            }
        });

        lbMoviePoster.setFont(new java.awt.Font("Calibri", 1, 12)); // NOI18N
        lbMoviePoster.setForeground(new java.awt.Color(51, 51, 51));
        lbMoviePoster.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbMoviePoster.setText("Movie Poster [207 X 300]");
        lbMoviePoster.setPreferredSize(new java.awt.Dimension(300, 207));

        jDesktopPane1.setLayer(lbMoviePoster, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jDesktopPane1Layout = new javax.swing.GroupLayout(jDesktopPane1);
        jDesktopPane1.setLayout(jDesktopPane1Layout);
        jDesktopPane1Layout.setHorizontalGroup(
            jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lbMoviePoster, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        );
        jDesktopPane1Layout.setVerticalGroup(
            jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lbMoviePoster, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jDesktopPane1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txtMovieTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(txtRunningTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtYearReleased, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 314, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, 316, Short.MAX_VALUE))
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 636, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(cbSelectStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txtDirector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(txtActor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(txtSource, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1))
                .addGap(18, 18, 18))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtMovieTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(txtRunningTime, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtYearReleased, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtDirector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtActor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtSource, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(cbSelectStatus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jDesktopPane1))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1))
                    .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private boolean movieTitleDetector = false;
    private boolean runningTimeDetector = false;
    private boolean yearReleasedDetector = false;
    private boolean directorDetector = false;
    private boolean actorDetector = false;
    private boolean sourceDetector = false;
    private boolean descriptionDetector = false;
    public static boolean created = false;
    
    public static String moviePosterPath = "";
    public static int s = 0;
    public static byte [] movieImageByte= null;
    public static String movieTitle = "";
    public static String runningTime = "";
    public static String yearReleased = "";
    public static String director = "";
    public static String actor = "";
    public static String source = "";
    public static String status = "";
    public static String movieType = "";
    public static String genre = "";
    public static String language = "";
    public static String englishSubtitlePath = "";
    public static String khmerSubtitlePath = "";
    
    public static String subtitle = "None";
    public static String description = "";
    
    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/icon/Form Logo.png")));
        ImageIcon format = null;
        try {
            
            Statement statement = Data.getDataConnection().createStatement();
            ResultSet resultSet = statement.executeQuery("SELECT\n" +
            "tblmovie.moviePoster\n" +
            "FROM\n" +
            "dbmajorcineplex.tblmovie\n" +
            "WHERE\n" +
            "MovieID = 18;");
            if (resultSet.first()){
                byte[] imagedata = resultSet.getBytes(1);
                format = new ImageIcon(imagedata) {};
                lbMoviePoster.setIcon(format);
                System.out.println(imagedata);
            }
            resultSet.close();
            statement.close();
        } catch (Exception e) {
        }
    }//GEN-LAST:event_formWindowOpened

    private void txtMovieTitleFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtMovieTitleFocusGained
        if (!movieTitleDetector){
            txtMovieTitle.setCaretPosition(0);
        }
    }//GEN-LAST:event_txtMovieTitleFocusGained

    private void txtMovieTitleFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtMovieTitleFocusLost
        String text = txtMovieTitle.getText().trim();
        if (text.isEmpty()){
            txtMovieTitle.setForeground(new Color(153,153,153));
            txtMovieTitle.setText("Movie Title");
            movieTitleDetector = false;
        }
    }//GEN-LAST:event_txtMovieTitleFocusLost

    private void txtMovieTitleKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMovieTitleKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER){
            txtMovieTitle.grabFocus();
        }
    }//GEN-LAST:event_txtMovieTitleKeyPressed

    private void txtMovieTitleKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMovieTitleKeyTyped
        txtMovieTitle.setForeground(Color.DARK_GRAY);
        if (movieTitleDetector == false){
            txtMovieTitle.setText("");
            movieTitleDetector = true;
        }
    }//GEN-LAST:event_txtMovieTitleKeyTyped

    private void txtDirectorFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDirectorFocusGained
        if (!directorDetector){
            txtDirector.setCaretPosition(0);
        }
    }//GEN-LAST:event_txtDirectorFocusGained

    private void txtDirectorFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDirectorFocusLost
        String text = txtDirector.getText().trim();
        if (text.isEmpty()){
            txtDirector.setForeground(new Color(153,153,153));
            txtDirector.setText("Director");
            directorDetector = false;
        }
    }//GEN-LAST:event_txtDirectorFocusLost

    private void txtDirectorKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDirectorKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER){
            txtDirector.grabFocus();
        }
    }//GEN-LAST:event_txtDirectorKeyPressed

    private void txtDirectorKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDirectorKeyTyped
        txtDirector.setForeground(Color.DARK_GRAY);
        if (directorDetector == false){
            txtDirector.setText("");
            directorDetector = true;
        }
    }//GEN-LAST:event_txtDirectorKeyTyped

    private void txtActorFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtActorFocusGained
        if (!actorDetector){
            txtActor.setCaretPosition(0);
        }
    }//GEN-LAST:event_txtActorFocusGained

    private void txtActorFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtActorFocusLost
        String text = txtActor.getText().trim();
        if (text.isEmpty()){
            txtActor.setForeground(new Color(153,153,153));
            txtActor.setText("Actor");
            actorDetector = false;
        }
    }//GEN-LAST:event_txtActorFocusLost

    private void txtActorKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtActorKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER){
            txtActor.grabFocus();
        }
    }//GEN-LAST:event_txtActorKeyPressed

    private void txtActorKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtActorKeyTyped
        txtActor.setForeground(Color.DARK_GRAY);
        if (actorDetector == false){
            txtActor.setText("");
            actorDetector = true;
        }
    }//GEN-LAST:event_txtActorKeyTyped

    private void txtSourceFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtSourceFocusGained
        if (!sourceDetector){
            txtSource.setCaretPosition(0);
        }
    }//GEN-LAST:event_txtSourceFocusGained

    private void txtSourceFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtSourceFocusLost
        String text = txtSource.getText().trim();
        if (text.isEmpty()){
            txtSource.setForeground(new Color(153,153,153));
            txtSource.setText("Source");
            sourceDetector = false;
        }
    }//GEN-LAST:event_txtSourceFocusLost

    private void txtSourceKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSourceKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER){
            txtSource.grabFocus();
        }
    }//GEN-LAST:event_txtSourceKeyPressed

    private void txtSourceKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSourceKeyTyped
        txtSource.setForeground(Color.DARK_GRAY);
        if (sourceDetector == false){
            txtSource.setText("");
            sourceDetector = true;
        }
    }//GEN-LAST:event_txtSourceKeyTyped

    private void btnInsertPosterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInsertPosterActionPerformed
//        try {
//            Image image = ImageIO.read(getClass().getResource("/poster/Spider Man Homecoming.png"));
//            lbMoviePoster.setIcon(new ImageIcon(image));
//        } catch (Exception e) {
//        }
        try {
            JFileChooser fileChooser = new JFileChooser("src/poster");
            FileFilter fileFilter = new FileFilter() {
                @Override
                public boolean accept(File file) {
                    String name = file.getName().toLowerCase();
                    if (file.isDirectory())
                        return  true;
                    else if (name.endsWith(".png") || name.endsWith(".jpg"))
                        return true;
                    return false;
                    //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                }
            };
            int click = fileChooser.showOpenDialog(this);
            if (click == JFileChooser.APPROVE_OPTION){
                File file = fileChooser.getSelectedFile();
                String moviePoster = "/poster/"+file.getName();
                System.out.println(moviePoster);
                Image image = ImageIO.read(getClass().getResource(moviePoster));
                lbMoviePoster.setIcon(new ImageIcon(image));
                moviePosterPath = moviePoster;
                String movieFile = file.getAbsolutePath();
                File movieImageFile = new File(movieFile);
                FileInputStream movieImageInputStream = new FileInputStream(movieImageFile);
                ByteArrayOutputStream movieImageOPS = new ByteArrayOutputStream();
                byte[] buf = new byte[1024];
                for (int readNum; (readNum = movieImageInputStream.read(buf)) != -1;){
                    movieImageOPS.write(buf,0,readNum);
                }
                movieImageByte = movieImageOPS.toByteArray();
            }
        } catch (Exception e) {
        }
    }//GEN-LAST:event_btnInsertPosterActionPerformed

    private void btnCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateActionPerformed
        try {
            if (!lbMoviePoster.getIcon().equals(null)){
                if (movieTitleDetector){
                    if (runningTimeDetector){
                        if (yearReleasedDetector){
                            if (directorDetector){
                                if (actorDetector){
                                    if (sourceDetector){
                                        if (!cbSelectStatus.getSelectedItem().equals("   Status")){
                                            if (chb2D.isSelected() || chb3D.isSelected() || chb4DX.isSelected()){
                                                if (chbAction.isSelected() || chbAdventure.isSelected() || chbAnimation.isSelected() || chbComedy.isSelected() || chbDrama.isSelected() || chbHistorical.isSelected() || chbHorror.isSelected() || chbMusical.isSelected() || chbRomance.isSelected() || chbSciFi.isSelected()){
                                                    if (chbLanEnglish.isSelected() || chbLanKhmer.isSelected()){
                                                        if (descriptionDetector){
                                                            movieTitle = txtMovieTitle.getText().trim();
                                                            runningTime = txtRunningTime.getText().trim();
                                                            yearReleased = txtYearReleased.getText().trim();
                                                            director = txtDirector.getText().trim();
                                                            actor = txtActor.getText().trim();
                                                            source = txtSource.getText().trim();
                                                            status = cbSelectStatus.getSelectedItem().toString().trim();
                                                                //Movie Type
                                                                if (chb2D.isSelected())
                                                                    movieType = "2D";
                                                                if (chb3D.isSelected())
                                                                    if (movieType.equals(""))
                                                                        movieType = "3D";
                                                                    else
                                                                        movieType = movieType + " , 3D";
                                                                if (chb4DX.isSelected())
                                                                    if (movieType.equals(""))
                                                                        movieType = "4DX";
                                                                    else
                                                                        movieType = movieType + " , 4DX";
                                                                //Genre
                                                                if (chbAction.isSelected())
                                                                    genre = "Action";
                                                                if (chbAdventure.isSelected())
                                                                    if (genre.equals(""))
                                                                        genre = "Adventure";
                                                                    else
                                                                        genre = genre + " , Adventure";
                                                                if (chbAnimation.isSelected())
                                                                    if (genre.equals(""))
                                                                        genre = "Animation";
                                                                    else
                                                                        genre = genre + " , Animation";
                                                                if (chbComedy.isSelected())
                                                                    if (genre.equals(""))
                                                                        genre = "Comedy";
                                                                    else
                                                                        genre = genre + " , Comedy";
                                                                if (chbDrama.isSelected())
                                                                    if (genre.equals(""))
                                                                        genre = "Drama";
                                                                    else
                                                                        genre = genre + " , Drama";
                                                                if (chbHistorical.isSelected())
                                                                    if (genre.equals(""))
                                                                        genre = "Historical";
                                                                    else
                                                                        genre = genre + " , Historical";
                                                                if (chbHorror.isSelected())
                                                                    if (genre.equals(""))
                                                                        genre = "Horror";
                                                                    else
                                                                        genre = genre + " , Horror";
                                                                if (chbMusical.isSelected())
                                                                    if (genre.equals(""))
                                                                        genre = "Musical";
                                                                    else
                                                                        genre = genre + " , Musical";
                                                                if (chbRomance.isSelected())
                                                                    if (genre.equals(""))
                                                                        genre = "Romance";
                                                                    else
                                                                        genre = genre + " , Romance";
                                                                if (chbSciFi.isSelected())
                                                                    if (genre.equals(""))
                                                                        genre = "SciFi";
                                                                    else
                                                                        genre = genre + " , SciFi";
                                                                //Language
                                                                if (chbLanEnglish.isSelected())
                                                                    language = "English";
                                                                if (chbLanKhmer.isSelected())
                                                                    if (language.equals(""))
                                                                        language = "Khmer";
                                                                    else
                                                                        language = language + " , Khmer";
                                                                //Subtitle
                                                                if (chbSubEnglish.isSelected())
                                                                    subtitle = "English";
                                                                if (chbSubKhmer.isSelected())
                                                                    if (subtitle.equals(""))
                                                                        subtitle = "Khmer";
                                                                    else
                                                                        subtitle = subtitle + " , Khmer";
                                                            description = txtDescription.getText().trim();
                                                            CreateMovieConfirm.main(null);
                                                        } else
                                                            JOptionPane.showMessageDialog(this, "Please Insert Description.");
                                                    } else
                                                        JOptionPane.showMessageDialog(this, "Please Select At Least 1 Language.");
                                                } else
                                                    JOptionPane.showMessageDialog(this, "Please Select At Least 1 Genre Type.");
                                            } else
                                                JOptionPane.showMessageDialog(this, "Please Select At Least 1 Movie Type.");
                                        } else
                                            JOptionPane.showMessageDialog(this, "Please Select Movie Status.");
                                    } else 
                                        JOptionPane.showMessageDialog(this, "Please Insert Source.");
                                } else 
                                    JOptionPane.showMessageDialog(this, "Please Insert Actor Name.");
                            } else 
                                JOptionPane.showMessageDialog(this, "Please Insert Director Name.");
                        } else 
                            JOptionPane.showMessageDialog(this, "Please Insert Year Released.");
                    } else 
                        JOptionPane.showMessageDialog(this, "Please Insert Running Time.");
                } else 
                    JOptionPane.showMessageDialog(this, "Please Insert Movie Title.");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Please Insert Movie Poster.");
        }
    }//GEN-LAST:event_btnCreateActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
//        try {
//            Image image = ImageIO.read(getClass().getResource("/poster/Captain America - Civil War.png"));
//            lbMoviePoster.setIcon(new ImageIcon(image));
//        } catch (Exception e) {
//        }
        lbMoviePoster.setIcon(null);
        txtMovieTitle.setText("");
        txtMovieTitleFocusLost(null);
        txtRunningTime.setText("");
        txtRunningTimeFocusLost(null);
        txtYearReleased.setText("");
        txtYearReleasedFocusLost(null);
        txtDirector.setText("");
        txtDirectorFocusLost(null);
        txtActor.setText("");
        txtActorFocusLost(null);
        txtSource.setText("");
        txtSourceFocusLost(null);
        txtDescription.setText("");
        txtDescriptionFocusLost(null);
        cbSelectStatus.setSelectedItem("   Status");
        chb2D.setSelected(false);
        chb3D.setSelected(false);
        chb4DX.setSelected(false);
        chbAction.setSelected(false);
        chbAdventure.setSelected(false);
        chbAnimation.setSelected(false);
        chbComedy.setSelected(false);
        chbDrama.setSelected(false);
        chbHistorical.setSelected(false);
        chbHorror.setSelected(false);
        chbMusical.setSelected(false);
        chbRomance.setSelected(false);
        chbSciFi.setSelected(false);
        chbLanEnglish.setSelected(false);
        chbLanKhmer.setSelected(false);
        chbSubEnglish.setSelected(false);
        chbSubKhmer.setSelected(false);
        movieTitleDetector = false;
        txtMovieTitle.grabFocus();
    }//GEN-LAST:event_btnClearActionPerformed

    private void txtDescriptionFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDescriptionFocusGained
        if (!descriptionDetector){
            txtDescription.setCaretPosition(0);
        }
    }//GEN-LAST:event_txtDescriptionFocusGained

    private void txtDescriptionFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDescriptionFocusLost
        String text = txtDescription.getText().trim();
        if (text.isEmpty()){
            txtDescription.setForeground(new Color(153,153,153));
            txtDescription.setText("Description");
            descriptionDetector = false;
        }
    }//GEN-LAST:event_txtDescriptionFocusLost

    private void txtDescriptionKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDescriptionKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER){
            txtDescription.grabFocus();
        }
    }//GEN-LAST:event_txtDescriptionKeyPressed

    private void txtDescriptionKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDescriptionKeyTyped
        txtDescription.setForeground(Color.DARK_GRAY);
        if (descriptionDetector == false){
            txtDescription.setText("");
            descriptionDetector = true;
        }
    }//GEN-LAST:event_txtDescriptionKeyTyped

    private void txtRunningTimeFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtRunningTimeFocusGained
        if (!runningTimeDetector){
            txtRunningTime.setCaretPosition(0);
        }
    }//GEN-LAST:event_txtRunningTimeFocusGained

    private void txtRunningTimeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtRunningTimeFocusLost
        String text = txtRunningTime.getText().trim();
        if (text.isEmpty()){
            txtRunningTime.setForeground(new Color(153,153,153));
            txtRunningTime.setText("Running Time");
            runningTimeDetector = false;
        }
    }//GEN-LAST:event_txtRunningTimeFocusLost

    private void txtRunningTimeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtRunningTimeKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER){
            txtRunningTime.grabFocus();
        }
    }//GEN-LAST:event_txtRunningTimeKeyPressed

    private void txtRunningTimeKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtRunningTimeKeyTyped
        txtRunningTime.setForeground(Color.DARK_GRAY);
        if (runningTimeDetector == false){
            txtRunningTime.setText("");
            runningTimeDetector = true;
        }
    }//GEN-LAST:event_txtRunningTimeKeyTyped

    private void txtYearReleasedFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtYearReleasedFocusLost
        String text = txtYearReleased.getText().trim();
        if (text.isEmpty()){
            txtYearReleased.setForeground(new Color(153,153,153));
            txtYearReleased.setText("Year Released");
            yearReleasedDetector = false;
        }
    }//GEN-LAST:event_txtYearReleasedFocusLost

    private void txtYearReleasedFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtYearReleasedFocusGained
        if (!yearReleasedDetector){
            txtYearReleased.setCaretPosition(0);
        }
    }//GEN-LAST:event_txtYearReleasedFocusGained

    private void txtYearReleasedKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtYearReleasedKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER){
            txtYearReleased.grabFocus();
        }
    }//GEN-LAST:event_txtYearReleasedKeyPressed

    private void txtYearReleasedKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtYearReleasedKeyTyped
        txtYearReleased.setForeground(Color.DARK_GRAY);
        if (yearReleasedDetector == false){
            txtYearReleased.setText("");
            yearReleasedDetector = true;
        }
    }//GEN-LAST:event_txtYearReleasedKeyTyped

    private void chbSubKhmerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chbSubKhmerActionPerformed
        if(chbSubKhmer.isSelected()){
            try {
                JFileChooser fileChooser = new JFileChooser("Subtitle");
                FileFilter fileFilter = new FileFilter() {
                    @Override
                    public boolean accept(File file) {
                        String name = file.getName().toLowerCase();
                        if (file.isDirectory())
                            return  true;
                        else if (name.endsWith(".txt") || name.endsWith(".docx"))
                            return true;
                        return false;
                        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                    }
                };
                int click = fileChooser.showOpenDialog(this);
                if (click == JFileChooser.APPROVE_OPTION){
                    File file = fileChooser.getSelectedFile();
                    String Subtitle = "/Subtitle/Khmer"+file.getName();
                    //--------------------------------------
                    khmerSubtitlePath = Subtitle;
                } else
                    chbSubKhmer.setSelected(false);
            } catch (Exception e) {
            }
        }
    }//GEN-LAST:event_chbSubKhmerActionPerformed

    private void chbSubEnglishActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chbSubEnglishActionPerformed
        if(chbSubEnglish.isSelected()){
            try {
                JFileChooser fileChooser = new JFileChooser("Subtitle");
                FileFilter fileFilter = new FileFilter() {
                    @Override
                    public boolean accept(File file) {
                        String name = file.getName().toLowerCase();
                        if (file.isDirectory())
                            return  true;
                        else if (name.endsWith(".txt") || name.endsWith(".docx"))
                            return true;
                        return false;
                        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                    }
                };
                int click = fileChooser.showOpenDialog(this);
                if (click == JFileChooser.APPROVE_OPTION){
                    File file = fileChooser.getSelectedFile();
                    String Subtitle = "/Subtitle/English"+file.getName();
                    //--------------------------------------
                    englishSubtitlePath = Subtitle;
                } else
                    chbSubEnglish.setSelected(false);
            } catch (Exception e) {
            }
        }
    }//GEN-LAST:event_chbSubEnglishActionPerformed

    private void formWindowGainedFocus(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowGainedFocus
        if (created){
            btnClearActionPerformed(null);
            movieType = "";
        }
        created = false;
    }//GEN-LAST:event_formWindowGainedFocus

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Test.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Test.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Test.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Test.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Test().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnCreate;
    private javax.swing.JButton btnInsertPoster;
    private javax.swing.JComboBox<String> cbSelectStatus;
    private javax.swing.JCheckBox chb2D;
    private javax.swing.JCheckBox chb3D;
    private javax.swing.JCheckBox chb4DX;
    private javax.swing.JCheckBox chbAction;
    private javax.swing.JCheckBox chbAdventure;
    private javax.swing.JCheckBox chbAnimation;
    private javax.swing.JCheckBox chbComedy;
    private javax.swing.JCheckBox chbDrama;
    private javax.swing.JCheckBox chbHistorical;
    private javax.swing.JCheckBox chbHorror;
    private javax.swing.JCheckBox chbLanEnglish;
    private javax.swing.JCheckBox chbLanKhmer;
    private javax.swing.JCheckBox chbMusical;
    private javax.swing.JCheckBox chbRomance;
    private javax.swing.JCheckBox chbSciFi;
    private javax.swing.JCheckBox chbSubEnglish;
    private javax.swing.JCheckBox chbSubKhmer;
    private javax.swing.JDesktopPane jDesktopPane1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lbMoviePoster;
    private javax.swing.JTextField txtActor;
    private javax.swing.JTextArea txtDescription;
    private javax.swing.JTextField txtDirector;
    private javax.swing.JTextField txtMovieTitle;
    private textfieldformajorcineplex.TextFieldForMajorCineplex txtRunningTime;
    private javax.swing.JTextField txtSource;
    private textfieldformajorcineplex.TextFieldForMajorCineplex txtYearReleased;
    // End of variables declaration//GEN-END:variables
}
