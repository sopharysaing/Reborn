/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package form;

import java.awt.Color;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.FileFilter;
import java.sql.ResultSet;
import java.sql.Statement;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import static form.CreateMovie.status;
import java.util.ArrayList;
import plugin.Data;

/**
 *
 * @author MacBookPro
 */
public class EditUser extends javax.swing.JFrame {

    /**
     * Creates new form CreateMovie
     */
    public EditUser() {
        initComponents();
        txtStaffID.setForeground(new Color(153,153,153));
        txtPassword.setForeground(new Color(153,153,153));
        txtCPassword.setForeground(new Color(153,153,153));
        txtUsername.setForeground(new Color(153,153,153));
        //cbSelectStaff.setForeground(new Color(153,153,153));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtStaffID = new javax.swing.JTextField();
        txtUsername = new javax.swing.JTextField();
        txtPassword = new textfieldformajorcineplex.TextFieldForMajorCineplex();
        cbSelectRole = new javax.swing.JComboBox<>();
        btnClear = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        txtCPassword = new textfieldformajorcineplex.TextFieldForMajorCineplex();
        txtStaffName = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Edit User");
        setAlwaysOnTop(true);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        txtStaffID.setEditable(false);
        txtStaffID.setFont(new java.awt.Font("Calibri", 1, 16)); // NOI18N
        txtStaffID.setForeground(new java.awt.Color(153, 153, 153));
        txtStaffID.setText("Staff ID");
        txtStaffID.setCaretColor(new java.awt.Color(51, 51, 51));
        txtStaffID.setMargin(new java.awt.Insets(2, 10, 2, 10));
        txtStaffID.setPreferredSize(new java.awt.Dimension(200, 45));
        txtStaffID.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtStaffIDFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtStaffIDFocusLost(evt);
            }
        });
        txtStaffID.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtStaffIDKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtStaffIDKeyTyped(evt);
            }
        });

        txtUsername.setFont(new java.awt.Font("Calibri", 1, 16)); // NOI18N
        txtUsername.setForeground(new java.awt.Color(153, 153, 153));
        txtUsername.setText("Username");
        txtUsername.setCaretColor(new java.awt.Color(51, 51, 51));
        txtUsername.setMargin(new java.awt.Insets(2, 10, 2, 10));
        txtUsername.setPreferredSize(new java.awt.Dimension(200, 45));
        txtUsername.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtUsernameFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtUsernameFocusLost(evt);
            }
        });
        txtUsername.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtUsernameKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtUsernameKeyTyped(evt);
            }
        });

        txtPassword.setText("Password");
        txtPassword.setPreferredSize(new java.awt.Dimension(125, 45));
        txtPassword.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtPasswordFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtPasswordFocusLost(evt);
            }
        });
        txtPassword.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtPasswordKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtPasswordKeyTyped(evt);
            }
        });

        cbSelectRole.setFont(new java.awt.Font("Calibri", 1, 16)); // NOI18N
        cbSelectRole.setForeground(new java.awt.Color(51, 51, 51));
        cbSelectRole.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "   Role" }));
        cbSelectRole.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        cbSelectRole.setFocusable(false);
        cbSelectRole.setPreferredSize(new java.awt.Dimension(200, 45));

        btnClear.setFont(new java.awt.Font("Calibri", 1, 16)); // NOI18N
        btnClear.setForeground(new java.awt.Color(51, 51, 51));
        btnClear.setText("Clear");
        btnClear.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnClear.setFocusable(false);
        btnClear.setPreferredSize(new java.awt.Dimension(100, 45));
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        btnUpdate.setFont(new java.awt.Font("Calibri", 1, 16)); // NOI18N
        btnUpdate.setForeground(new java.awt.Color(51, 51, 51));
        btnUpdate.setText("Update");
        btnUpdate.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnUpdate.setFocusable(false);
        btnUpdate.setPreferredSize(new java.awt.Dimension(100, 45));
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        txtCPassword.setText("Confirm Password");
        txtCPassword.setPreferredSize(new java.awt.Dimension(125, 45));
        txtCPassword.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtCPasswordFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtCPasswordFocusLost(evt);
            }
        });
        txtCPassword.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtCPasswordKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtCPasswordKeyTyped(evt);
            }
        });

        txtStaffName.setEditable(false);
        txtStaffName.setFont(new java.awt.Font("Calibri", 1, 16)); // NOI18N
        txtStaffName.setForeground(new java.awt.Color(153, 153, 153));
        txtStaffName.setText("Staff Name");
        txtStaffName.setCaretColor(new java.awt.Color(51, 51, 51));
        txtStaffName.setMargin(new java.awt.Insets(2, 10, 2, 10));
        txtStaffName.setPreferredSize(new java.awt.Dimension(200, 45));
        txtStaffName.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtStaffNameFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtStaffNameFocusLost(evt);
            }
        });
        txtStaffName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtStaffNameKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtStaffNameKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txtStaffID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtCPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cbSelectRole, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtStaffName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtStaffID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(txtStaffName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(txtUsername, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(txtCPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbSelectRole, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(24, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private boolean staffIDDetector = false;
    private boolean staffNameDetector = false;
    private boolean passwordDetector = false;
    private boolean cpasswordDetector = false;
    private boolean userNameDetector = false;
    private boolean roleDetector = false;
    
    public static String profilePhotoPath = "";
    public static String name = "";
    public static String gender = "";
    public static String telephone = "";
    public static String email = "";
    public static String dateofbirth = "";
    public static String position = "";
    public static String status = "";
    public static String salary = "";
    public static String address = "";
    
    private ArrayList<String> staffIDs = new ArrayList<>();
    
    private void getUser(){
        try {
            staffIDs.clear();
            Statement statement = Data.getDataConnection().createStatement();
            ResultSet resultSet = statement.executeQuery("SELECT tbluser.StaffID,tbluser.UserName,tbluser.`Password`,tbluser.RoleID,tblstaff.StaffName FROM tbluser INNER JOIN tblstaff ON tbluser.StaffID = tblstaff.StaffID WHERE tblstaff.StaffID = "+ListUser.staffIDSelected+";");
            if (resultSet.first()){
                do {
                    txtStaffID.setText(resultSet.getString(1));
                    txtStaffName.setText(resultSet.getString(5));
                } while (resultSet.next());
            }
            resultSet.close();
            statement.close();
        } catch (Exception e) {
        }
    }
    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/icon/Form Logo.png")));
        getUser();
        txtUsername.grabFocus();
    }//GEN-LAST:event_formWindowOpened

    private void txtStaffIDFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtStaffIDFocusGained
        if (!staffIDDetector){
            txtStaffID.setCaretPosition(0);
        }
    }//GEN-LAST:event_txtStaffIDFocusGained

    private void txtStaffIDFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtStaffIDFocusLost
        String text = txtStaffID.getText().trim();
        if (text.isEmpty()){
            txtStaffID.setForeground(new Color(153,153,153));
            txtStaffID.setText("Staff ID");
            staffIDDetector = false;
        }
    }//GEN-LAST:event_txtStaffIDFocusLost

    private void txtStaffIDKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtStaffIDKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER){
            txtStaffID.grabFocus();
        }
    }//GEN-LAST:event_txtStaffIDKeyPressed

    private void txtStaffIDKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtStaffIDKeyTyped
        txtStaffID.setForeground(Color.DARK_GRAY);
        if (staffIDDetector == false){
            txtStaffID.setText("");
            staffIDDetector = true;
        }
    }//GEN-LAST:event_txtStaffIDKeyTyped

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        if (!txtUsername.getText().equals("Username")){
            if(txtPassword.getText().equals(txtCPassword.getText())){
                if (!cbSelectRole.getSelectedItem().equals("   Role")){
                    try {
                        Statement statement = Data.getDataConnection().createStatement();
                        statement.execute("UPDATE dbmajorcineplex.tbluser SET Username = '"+txtUsername.getText().trim()+"', Password = '"+txtPassword.getText().trim()+"', RoleID = "+cbSelectRole.getSelectedIndex()+" WHERE StaffID = "+ListUser.staffIDSelected+";");
                        statement.close();
                        JOptionPane.showMessageDialog(this, "User Updated");
                        this.dispose();
                    } catch (Exception e) {
                    }
                } else
                    JOptionPane.showMessageDialog(this, "Please Select Role.");
            } else
                JOptionPane.showMessageDialog(this, "Password Doesn't Match.");
        } else
            JOptionPane.showMessageDialog(this, "Please Insert Username.");
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
//        try {
//            Image image = ImageIO.read(getClass().getReposition("/poster/Captain America - Civil War.png"));
//            lbMoviePoster.setIcon(new ImageIcon(image));
//        } catch (Exception e) {
//        }
        
        txtStaffID.setText("");
        txtStaffIDFocusLost(null);
        txtStaffName.setText("   Staff Name");
        txtStaffNameFocusLost(null);
        txtPassword.setText("");
        txtPasswordFocusLost(null);
        txtUsername.setText("");
        txtUsernameFocusLost(null);
        txtPassword.setText("");
        txtPasswordFocusLost(null);
        txtCPassword.setText("");
        txtCPasswordFocusLost(null);
        cbSelectRole.setSelectedItem("   Role");
        staffIDDetector = false;
        txtStaffID.grabFocus();
    }//GEN-LAST:event_btnClearActionPerformed

    private void txtUsernameKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtUsernameKeyTyped
        txtUsername.setForeground(Color.DARK_GRAY);
        if (userNameDetector == false){
            txtUsername.setText("");
            userNameDetector = true;
        }
    }//GEN-LAST:event_txtUsernameKeyTyped

    private void txtUsernameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtUsernameKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER){
            txtUsername.grabFocus();
        }
    }//GEN-LAST:event_txtUsernameKeyPressed

    private void txtUsernameFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtUsernameFocusLost
        String text = txtUsername.getText().trim();
        if (text.isEmpty()){
            txtUsername.setForeground(new Color(153,153,153));
            txtUsername.setText("Username");
            userNameDetector = false;
        }
    }//GEN-LAST:event_txtUsernameFocusLost

    private void txtUsernameFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtUsernameFocusGained
        if (!userNameDetector){
            txtUsername.setCaretPosition(0);
        }
    }//GEN-LAST:event_txtUsernameFocusGained

    private void txtPasswordKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPasswordKeyTyped
        txtPassword.setForeground(Color.DARK_GRAY);
        if (passwordDetector == false){
            txtPassword.setText("");
            passwordDetector = true;
        }
    }//GEN-LAST:event_txtPasswordKeyTyped

    private void txtPasswordKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPasswordKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER){
            txtPassword.grabFocus();
        }
    }//GEN-LAST:event_txtPasswordKeyPressed

    private void txtPasswordFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPasswordFocusLost
        String text = txtPassword.getText().trim();
        if (text.isEmpty()){
            txtPassword.setForeground(new Color(153,153,153));
            txtPassword.setText("Password");
            passwordDetector = false;
        }
    }//GEN-LAST:event_txtPasswordFocusLost

    private void txtPasswordFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPasswordFocusGained
        if (!passwordDetector){
            txtPassword.setCaretPosition(0);
        }
    }//GEN-LAST:event_txtPasswordFocusGained

    private void txtCPasswordFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCPasswordFocusGained
        if (!cpasswordDetector){
            txtCPassword.setCaretPosition(0);
        }
    }//GEN-LAST:event_txtCPasswordFocusGained

    private void txtCPasswordFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCPasswordFocusLost
        String text = txtCPassword.getText().trim();
        if (text.isEmpty()){
            txtCPassword.setForeground(new Color(153,153,153));
            txtCPassword.setText("Confirm Password");
            cpasswordDetector = false;
        }
    }//GEN-LAST:event_txtCPasswordFocusLost

    private void txtCPasswordKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCPasswordKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER){
            txtPassword.grabFocus();
        }
    }//GEN-LAST:event_txtCPasswordKeyPressed

    private void txtCPasswordKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCPasswordKeyTyped
        txtCPassword.setForeground(Color.DARK_GRAY);
        if (cpasswordDetector == false){
            txtCPassword.setText("");
            cpasswordDetector = true;
        }
    }//GEN-LAST:event_txtCPasswordKeyTyped

    private void txtStaffNameFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtStaffNameFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_txtStaffNameFocusGained

    private void txtStaffNameFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtStaffNameFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_txtStaffNameFocusLost

    private void txtStaffNameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtStaffNameKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtStaffNameKeyPressed

    private void txtStaffNameKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtStaffNameKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_txtStaffNameKeyTyped

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EditUser.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EditUser.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EditUser.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EditUser.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EditUser().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JComboBox<String> cbSelectRole;
    private textfieldformajorcineplex.TextFieldForMajorCineplex txtCPassword;
    private textfieldformajorcineplex.TextFieldForMajorCineplex txtPassword;
    private javax.swing.JTextField txtStaffID;
    private javax.swing.JTextField txtStaffName;
    private javax.swing.JTextField txtUsername;
    // End of variables declaration//GEN-END:variables
}
