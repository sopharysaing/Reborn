/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package form;

import plugin.Data;
import java.awt.Color;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.sql.ResultSet;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import plugin.PanDateAlwaysOnTop;

/**
 *
 * @author MacBookPro
 */
public class CreateSchedule extends javax.swing.JFrame {

    /**
     * Creates new form CreateMovie
     */
    public CreateSchedule() {
        initComponents();
        table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnListMovie = new javax.swing.JButton();
        txtShowDate = new javax.swing.JTextField();
        btnSelectDate = new javax.swing.JButton();
        cbSelectTheatre = new javax.swing.JComboBox<>();
        txtEndTime = new textfieldformajorcineplex.TextFieldForMajorCineplex();
        btnAdd = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new tableformajorcineplex.TableForMajorCineplex();
        btnSave = new javax.swing.JButton();
        btnListMovie2 = new javax.swing.JButton();
        cbSelectPromotion = new javax.swing.JComboBox<>();
        cbSelectTime = new javax.swing.JComboBox<>();
        cbSelectMovie = new widecombobox.WideComboBox();
        txtscID = new javax.swing.JTextField();
        txttimeid = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Create Schedule");
        setAlwaysOnTop(true);
        setPreferredSize(new java.awt.Dimension(803, 700));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        btnListMovie.setFont(new java.awt.Font("Calibri", 1, 16)); // NOI18N
        btnListMovie.setForeground(new java.awt.Color(51, 51, 51));
        btnListMovie.setText("List Movie");
        btnListMovie.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnListMovie.setFocusable(false);
        btnListMovie.setPreferredSize(new java.awt.Dimension(150, 45));
        btnListMovie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnListMovieActionPerformed(evt);
            }
        });

        txtShowDate.setEditable(false);
        txtShowDate.setFont(new java.awt.Font("Calibri", 1, 16)); // NOI18N
        txtShowDate.setForeground(new java.awt.Color(153, 153, 153));
        txtShowDate.setText("Show Date");
        txtShowDate.setCaretColor(new java.awt.Color(51, 51, 51));
        txtShowDate.setMargin(new java.awt.Insets(2, 10, 2, 10));
        txtShowDate.setPreferredSize(new java.awt.Dimension(200, 45));
        txtShowDate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtShowDateFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtShowDateFocusLost(evt);
            }
        });
        txtShowDate.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtShowDateKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtShowDateKeyTyped(evt);
            }
        });

        btnSelectDate.setFont(new java.awt.Font("Calibri", 1, 16)); // NOI18N
        btnSelectDate.setForeground(new java.awt.Color(51, 51, 51));
        btnSelectDate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/iconScheduleBlack.png"))); // NOI18N
        btnSelectDate.setContentAreaFilled(false);
        btnSelectDate.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnSelectDate.setFocusable(false);
        btnSelectDate.setPreferredSize(new java.awt.Dimension(45, 45));
        btnSelectDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectDateActionPerformed(evt);
            }
        });

        cbSelectTheatre.setFont(new java.awt.Font("Calibri", 1, 16)); // NOI18N
        cbSelectTheatre.setForeground(new java.awt.Color(51, 51, 51));
        cbSelectTheatre.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "   Select Theatre" }));
        cbSelectTheatre.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        cbSelectTheatre.setFocusable(false);
        cbSelectTheatre.setPreferredSize(new java.awt.Dimension(200, 45));

        txtEndTime.setEditable(false);
        txtEndTime.setText("End Time");
        txtEndTime.setFocusable(false);
        txtEndTime.setNumber(true);
        txtEndTime.setPreferredSize(new java.awt.Dimension(150, 45));
        txtEndTime.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtEndTimeFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtEndTimeFocusLost(evt);
            }
        });
        txtEndTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtEndTimeActionPerformed(evt);
            }
        });
        txtEndTime.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtEndTimeKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtEndTimeKeyTyped(evt);
            }
        });

        btnAdd.setFont(new java.awt.Font("Calibri", 1, 16)); // NOI18N
        btnAdd.setForeground(new java.awt.Color(51, 51, 51));
        btnAdd.setText("Add");
        btnAdd.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnAdd.setFocusable(false);
        btnAdd.setPreferredSize(new java.awt.Dimension(100, 50));
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnClear.setFont(new java.awt.Font("Calibri", 1, 16)); // NOI18N
        btnClear.setForeground(new java.awt.Color(51, 51, 51));
        btnClear.setText("Clear");
        btnClear.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnClear.setFocusable(false);
        btnClear.setPreferredSize(new java.awt.Dimension(100, 50));
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        btnDelete.setFont(new java.awt.Font("Calibri", 1, 16)); // NOI18N
        btnDelete.setForeground(new java.awt.Color(51, 51, 51));
        btnDelete.setText("Delete");
        btnDelete.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnDelete.setFocusable(false);
        btnDelete.setPreferredSize(new java.awt.Dimension(100, 50));
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Schedule ID", "Movie Title", "Theatre", "Start Time", "End Time", "Promotion"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table.setFocusable(false);
        table.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        table.setIntercellSpacing(new java.awt.Dimension(0, 0));
        table.setRowHeight(25);
        table.setShowHorizontalLines(false);
        table.setShowVerticalLines(false);
        table.getTableHeader().setResizingAllowed(false);
        table.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(table);

        btnSave.setFont(new java.awt.Font("Calibri", 1, 16)); // NOI18N
        btnSave.setForeground(new java.awt.Color(51, 51, 51));
        btnSave.setText("Save");
        btnSave.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnSave.setFocusable(false);
        btnSave.setPreferredSize(new java.awt.Dimension(100, 50));
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnListMovie2.setFont(new java.awt.Font("Calibri", 1, 16)); // NOI18N
        btnListMovie2.setForeground(new java.awt.Color(51, 51, 51));
        btnListMovie2.setText("+");
        btnListMovie2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnListMovie2.setFocusable(false);
        btnListMovie2.setPreferredSize(new java.awt.Dimension(45, 45));
        btnListMovie2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnListMovie2ActionPerformed(evt);
            }
        });

        cbSelectPromotion.setFont(new java.awt.Font("Calibri", 1, 16)); // NOI18N
        cbSelectPromotion.setForeground(new java.awt.Color(51, 51, 51));
        cbSelectPromotion.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "   Select Promotion" }));
        cbSelectPromotion.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        cbSelectPromotion.setFocusable(false);
        cbSelectPromotion.setPreferredSize(new java.awt.Dimension(200, 45));
        cbSelectPromotion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbSelectPromotionActionPerformed(evt);
            }
        });

        cbSelectTime.setFont(new java.awt.Font("Calibri", 1, 16)); // NOI18N
        cbSelectTime.setForeground(new java.awt.Color(51, 51, 51));
        cbSelectTime.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Start Time" }));
        cbSelectTime.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        cbSelectTime.setFocusable(false);
        cbSelectTime.setPreferredSize(new java.awt.Dimension(150, 45));
        cbSelectTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbSelectTimeActionPerformed(evt);
            }
        });

        cbSelectMovie.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "   Select Movie" }));
        cbSelectMovie.setFocusable(false);
        cbSelectMovie.setFont(new java.awt.Font("Calibri", 1, 16)); // NOI18N
        cbSelectMovie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbSelectMovieActionPerformed(evt);
            }
        });

        txtscID.setEditable(false);

        txttimeid.setEditable(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 767, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(29, 29, 29)
                                .addComponent(txtscID, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(39, 39, 39)
                                .addComponent(txttimeid, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtShowDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cbSelectMovie, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(btnSelectDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(cbSelectTheatre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(cbSelectPromotion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(btnListMovie, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(cbSelectTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(btnListMovie2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(txtEndTime, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))))))
                .addGap(18, 18, 18))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnListMovie, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnListMovie2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtEndTime, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cbSelectTime, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cbSelectMovie, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtShowDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSelectDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(cbSelectTheatre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(cbSelectPromotion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(36, 36, 36)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtscID)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(txttimeid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 420, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private boolean showDateDetector = false;
    private boolean startTimeDetector = false;
    private boolean endTimeDetector = false;
    private String movieTitle = "";
    private void getscheduleid() {
        for (int i=0; i<table.getColumnCount(); i++)
        try {
            Statement statement = Data.getDataConnection().createStatement();
            ResultSet resultSet = statement.executeQuery("SELECT * FROM dbmajorcineplex.tblschedule ORDER BY ScheduleID DESC LIMIT 1;");
            String scheduleIDString = "";
            //int scheduleID = 0;
            if (resultSet.first()) {
                do {
                    scheduleIDString = resultSet.getString(1);
                } while (resultSet.next());
                scheduleID = 1+Integer.valueOf(scheduleIDString);
            } else {
                scheduleID = 1;
            }
            txtscID.setText(""+scheduleID);
            counter = scheduleID;
            resultSet.close();
            statement.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e);
        }
    }
    
    private void getMovie() {
        try {
            Statement statement = Data.getDataConnection().createStatement();
            ResultSet resultSet = statement.executeQuery("SELECT\n"
                    + "tblmovie.MovieTitle,\n"
                    + "tblmovietype.MovieTypeName,\n"
                    + "tblmovie.Runningtime\n"
                    + "FROM\n"
                    + "tblmovie\n"
                    + "INNER JOIN tblmovietype ON tblmovie.MovieTypeID = tblmovietype.MovieTypeID");
            cbSelectMovie.removeAllItems();
            cbSelectMovie.addItem("   Select Movie");
            if (resultSet.first()) {
                do {
                    cbSelectMovie.addItem("   " + resultSet.getString(1) + " " + resultSet.getString(2));
                } while (resultSet.next());
            }
            resultSet.close();
            statement.close();
        } catch (Exception e) {
        }
    }
        private void comparet() {
        try {
           
            Statement statement = Data.getDataConnection().createStatement();
            ResultSet resultSet = statement.executeQuery("select * from tbltime;");
           
            String tid= resultSet.getString(1);
            String t = resultSet.getString(2);
            String cb = cbSelectTime.toString().trim();
            if(cb.equals(t)){
                timeid = resultSet.getString(1) ;
            }
            txttimeid.setText(""+timeid);
            resultSet.close();
            statement.close();
        } catch (Exception e) {
        }
        }

    private void getTime() {
        try {
            Statement statement = Data.getDataConnection().createStatement();
            ResultSet resultSet = statement.executeQuery("SELECT\n"
                    + "tbltime.Time\n"
                    + "FROM\n"
                    + "tbltime");
            cbSelectTime.removeAllItems();
            cbSelectTime.addItem("   Select Time");
            if (resultSet.first()) {
                do {
                    cbSelectTime.addItem("   " + resultSet.getString(1));
                } while (resultSet.next());
            }
            resultSet.close();
            statement.close();
        } catch (Exception e) {
        }
    }

    private void getPromotion() {
        try {
            Statement statement = Data.getDataConnection().createStatement();
            ResultSet resultSet = statement.executeQuery("SELECT\n"
                    + "tblpromotion.PromotionName,\n"
                    + "tblpromotion.Discount\n"
                    + "FROM\n"
                    + "tblpromotion");
            cbSelectPromotion.removeAllItems();
            cbSelectPromotion.addItem("   Select Promotion");
            if (resultSet.first()) {
                do {
                    cbSelectPromotion.addItem("   " + resultSet.getString(1) + " (" + resultSet.getString(2) + "%)");
                } while (resultSet.next());
            }
            resultSet.close();
            statement.close();
        } catch (Exception e) {
        }
    }
    private String sid = "";
    private int counter = 0;
    private int scheduleID = 0 ;



    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/icon/Form Logo.png")));
        DefaultTableCellRenderer defaultTableCellRenderer = new DefaultTableCellRenderer();
        defaultTableCellRenderer.setHorizontalAlignment(0);
        for (int i = 0; i < table.getColumnCount(); i++) {
            table.getColumnModel().getColumn(i).setCellRenderer(defaultTableCellRenderer);
        }
        try {
            Statement statement = Data.getDataConnection().createStatement();
            ResultSet resultSet = statement.executeQuery("SELECT\n"
                    + "tblmovie.MovieTitle,\n"
                    + "tblmovietype.MovieTypeName,\n"
                    + "tblmovie.Runningtime\n"
                    + "FROM\n"
                    + "tblmovie\n"
                    + "INNER JOIN tblmovietype ON tblmovie.MovieTypeID = tblmovietype.MovieTypeID");
            cbSelectMovie.removeAllItems();
            cbSelectMovie.addItem("   Select Movie");
            if (resultSet.first()) {
                do {
                    String moviecomp = "   " + resultSet.getString(1) + " " + resultSet.getString(2);
                    if(cbSelectMovie.getSelectedItem().equals(moviecomp))
                        movieid=resultSet.getString(1);
                } while (resultSet.next());
            }
            resultSet.close();
            statement.close();
        } catch (Exception e) {
        }
        txttimeid.setVisible(false);
        txtscID.setVisible(false);
        comparet();
        getscheduleid();
        getTime();
        getMovie();
        getPromotion();
    }//GEN-LAST:event_formWindowOpened

    private void btnListMovieActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnListMovieActionPerformed
        ListMovie.main(null);
    }//GEN-LAST:event_btnListMovieActionPerformed

    private void txtShowDateFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtShowDateFocusGained
        if (!showDateDetector) {
            txtShowDate.setCaretPosition(0);
        }
    }//GEN-LAST:event_txtShowDateFocusGained
    private void gettime(java.awt.event.FocusEvent evt) {
        try {
            Statement statement = Data.getDataConnection().createStatement();
            String stime = "" + cbSelectTime.getSelectedItem();
            ResultSet resultSet = statement.executeQuery("select Time from tbltime where Time='" + stime + "'; ");
            if (resultSet.first()) {
                cbSelectTime.addItem(resultSet.getString(1));
            } else {
                resultSet.close();
            }
            statement.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e);
        }
    }
    private void txtShowDateFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtShowDateFocusLost
        String text = txtShowDate.getText().trim();
        if (text.isEmpty()) {
            txtShowDate.setForeground(new Color(153, 153, 153));
            txtShowDate.setText("   Show Date");
            showDateDetector = false;
        }
    }//GEN-LAST:event_txtShowDateFocusLost

    private void txtShowDateKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtShowDateKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            txtShowDate.grabFocus();
        }
    }//GEN-LAST:event_txtShowDateKeyPressed

    private void txtShowDateKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtShowDateKeyTyped
        txtShowDate.setForeground(Color.DARK_GRAY);
        if (showDateDetector == false) {
            txtShowDate.setText("");
            showDateDetector = true;
        }
    }//GEN-LAST:event_txtShowDateKeyTyped
    PanDateAlwaysOnTop dob;
    private void btnSelectDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectDateActionPerformed
        long millCurrent1 = System.currentTimeMillis();
        dob = new PanDateAlwaysOnTop(null, true);
        dob.setLocation(btnSelectDate);
        dob.setVisible(true);
        long millDOB = dob.getDate().getTime();
        SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd");
        txtShowDate.setForeground(Color.DARK_GRAY);
        showDateDetector = true;
        txtShowDate.setText(simpleDateFormat.format(dob.getDate()));
    }//GEN-LAST:event_btnSelectDateActionPerformed

    private void txtEndTimeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtEndTimeFocusLost
        String text = txtEndTime.getText().trim();
        if (text.isEmpty()) {
            txtEndTime.setForeground(new Color(153, 153, 153));
            txtEndTime.setText("   Running Time");
            endTimeDetector = false;
        }
    }//GEN-LAST:event_txtEndTimeFocusLost

    private void txtEndTimeFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtEndTimeFocusGained
        if (!endTimeDetector) {
            txtEndTime.setCaretPosition(0);
        }
    }//GEN-LAST:event_txtEndTimeFocusGained

    private void txtEndTimeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtEndTimeKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            txtEndTime.grabFocus();
        }
    }//GEN-LAST:event_txtEndTimeKeyPressed

    private void txtEndTimeKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtEndTimeKeyTyped
        txtEndTime.setForeground(Color.DARK_GRAY);
        if (endTimeDetector == false) {
            txtEndTime.setText("");
            endTimeDetector = true;
        }
    }//GEN-LAST:event_txtEndTimeKeyTyped

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        if (!cbSelectMovie.getSelectedItem().equals("   Select Movie")) {
            if (!cbSelectTime.getSelectedItem().equals("   Start Time")) {
                if (!txtShowDate.getText().equals("   Show Date")) {
                    if (!cbSelectTheatre.getSelectedItem().equals("   Select Theatre")) {
                        if (!cbSelectPromotion.getSelectedItem().equals("   Select Promotion")) {
                        
                            String selectedmovie = (String) cbSelectMovie.getSelectedItem().toString().trim();
                            String txtdate = txtEndTime.getText().toString().trim();
                            String selectedtime = (String) cbSelectTime.getSelectedItem().toString().trim();
                            String selectedtheatre = (String) cbSelectTheatre.getSelectedItem().toString().trim();
                            String selectedpromotion = (String) cbSelectPromotion.getSelectedItem().toString().trim();
                            String scheid = "" + txtscID.getText();
                            DefaultTableModel defaultTableModel = (DefaultTableModel) table.getModel();
                            String st[] = {scheid, selectedmovie, selectedtheatre, selectedtime, txtdate, selectedpromotion};
                            defaultTableModel.addRow(st);

                       

                        txtEndTime.setText("   End Time");
                        cbSelectTime.setModel(new javax.swing.DefaultComboBoxModel(new String[]{"   Start Time"}));
                        cbSelectPromotion.setModel(new javax.swing.DefaultComboBoxModel(new String[]{"   Select Promotion"}));
                        cbSelectTheatre.setModel(new javax.swing.DefaultComboBoxModel(new String[]{"   Select Theatre"}));
                        getTime();
                        getEndTime();
                        getMovie();
                        getscheduleid();
                        getPromotion();
                        getTheatre();
                        counter++;
                        comparet();
                        btnClearActionPerformed(null);
                        } else {
                        JOptionPane.showMessageDialog(this, "Please Select Promotion.");
                    }
                    } else {
                        JOptionPane.showMessageDialog(this, "Please Select Theatre.");
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Please Select Date.");
                }
            } else {
                JOptionPane.showMessageDialog(this, "Please Select Start Time.");
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please Select Movie Title.");
        }
    }//GEN-LAST:event_btnAddActionPerformed
    private String movieid="";
    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        if (counter != 0)
            txtscID.setText(""+counter);
        else {
            try {
                Statement statement = Data.getDataConnection().createStatement();
                ResultSet resultSet = statement.executeQuery("SELECT * FROM dbmajorcineplex.tblpromotion ORDER BY PromotionID DESC LIMIT 1;");
                String prIDString = "";
                int prID = 0;
                if (resultSet.first()){
                    do {
                        prIDString = resultSet.getString(1);
                    } while (resultSet.next());
                    prID = 1+Integer.valueOf(prIDString);
                } else 
                    prID = 1;
                txtscID.setText(""+prID);
                counter = prID;
                resultSet.close();
                statement.close();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, e);
            }
        }
        cbSelectMovie.setModel(new javax.swing.DefaultComboBoxModel(new String[]{"   Select Movie"}));
        txtEndTime.setText("   End Time");
        cbSelectTime.setModel(new javax.swing.DefaultComboBoxModel(new String[]{"   Start Time"}));
        cbSelectPromotion.setModel(new javax.swing.DefaultComboBoxModel(new String[]{"   Select Promotion"}));
        cbSelectTheatre.setModel(new javax.swing.DefaultComboBoxModel(new String[]{"   Select Theatre"}));
        txtShowDate.setText("Show Date");

        getTime();
        getMovie();
        getPromotion();
    }//GEN-LAST:event_btnClearActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        try {
        DefaultTableModel model = (DefaultTableModel) this.table.getModel();
        int[] rows = table.getSelectedRows();
        for(int i=0;i<rows.length;i++){
          model.removeRow(rows[i]-i);
        }
        getscheduleid();
        }catch(Exception e){}
    }//GEN-LAST:event_btnDeleteActionPerformed
        private String timeid="";
        private String theatreid="";
        private String promoid="";
    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed

                try {
                    DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy/MM/dd HH:mm:ss");
                    LocalDateTime now = LocalDateTime.now();
                    String scheduledate = ""+dtf.format(now);
                    String scheid = "" + txtscID.getText();
                    String endt = txtEndTime.getText();
            if (table.getRowCount() > 0){
                Statement statement = Data.getDataConnection().createStatement();
                for (int i=0; i<table.getRowCount(); i++){
                    statement.execute("INSERT INTO dbmajorcineplex.tblschedule(ScheduleID,StaffID,ScheduleDate) VALUES "
                                                                             + "('"+scheid+"',"+Login.staffID+",'"+scheduledate+"','"+txtShowDate.getText()+"',"+movieid+");");
                    //statement.execute("INSERT INTO dbmajorcineplex.tblscheduledetail(ScheduleID,TimeID,TheatreID,EndTime,PromotionID) VALUES"
                                                                             //+ "("+scheid+",'"+timeid+"','"+theatreid+"',"+endt+",'"+promoid+"');");
                }
                statement.close();
                table.setRowCount(0);
                btnClearActionPerformed(null);
                JOptionPane.showMessageDialog(this, "Saved!");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e);
        }
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnListMovie2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnListMovie2ActionPerformed
        CreateTime.main(null);
    }//GEN-LAST:event_btnListMovie2ActionPerformed

    private void cbSelectTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbSelectTimeActionPerformed
        comparet();
        getEndTime();
    }//GEN-LAST:event_cbSelectTimeActionPerformed

    private void cbSelectMovieActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbSelectMovieActionPerformed
        getEndTime();
        getTheatre();

    }//GEN-LAST:event_cbSelectMovieActionPerformed

    private void txtEndTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtEndTimeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtEndTimeActionPerformed

    private void cbSelectPromotionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbSelectPromotionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbSelectPromotionActionPerformed

    private void getEndTime() {
        if (cbSelectTime.getSelectedIndex() != 0 && cbSelectMovie.getSelectedIndex() != 0) {
            try {
                Statement statement = Data.getDataConnection().createStatement();
                ResultSet resultSet = statement.executeQuery("SELECT\n"
                        + "tblmovie.MovieTitle,\n"
                        + "tblmovietype.MovieTypeName,\n"
                        + "tblmovie.Runningtime\n"
                        + "FROM\n"
                        + "tblmovie\n"
                        + "INNER JOIN tblmovietype ON tblmovie.MovieTypeID = tblmovietype.MovieTypeID");
                if (resultSet.first()) {
                    do {
                        String comparer = "   " + resultSet.getString(1) + " " + resultSet.getString(2);
                        if (cbSelectMovie.getSelectedItem().equals(comparer)) {
                            int runningTimeInMn = 0;
                            runningTimeInMn = Integer.valueOf(resultSet.getString(3));
                            int runningTImeInH = 0;
                            while (runningTimeInMn >= 60) {
                                runningTimeInMn -= 60;
                                runningTImeInH++;
                            }
                            String startTime = cbSelectTime.getSelectedItem().toString().trim();
                            String h = "" + startTime.charAt(0) + startTime.charAt(1);
                            String mn = "" + startTime.charAt(3) + startTime.charAt(4);
                            String endS = "" + startTime.charAt(6) + startTime.charAt(7);
                            int endH = Integer.valueOf(h) + runningTImeInH;
                            int endMn = Integer.valueOf(mn) + runningTimeInMn + 15;
                            while (endMn >= 60) {
                                endMn -= 60;
                                endH++;
                            }
                            String nextDay = "";
                            if (endH > 24) {
                                endH -= 24;
                                nextDay = " (tmr)";
                            }
                            if (endH > 9) {
                                if (endMn > 9) {
                                    txtEndTime.setText("" + endH + ":" + endMn + ":" + endS + nextDay);
                                } else {
                                    txtEndTime.setText("" + endH + ":0" + endMn + ":" + endS + nextDay);
                                }
                            } else {
                                if (endMn > 9) {
                                    txtEndTime.setText("0" + endH + ":" + endMn + ":" + endS + nextDay);
                                } else {
                                    txtEndTime.setText("0" + endH + ":0" + endMn + ":0" + endS + nextDay);
                                }
                            }
                            txtEndTime.setForeground(new Color(51, 51, 51));
                        }
                    } while (resultSet.next());
                }
                resultSet.close();
                statement.close();
            } catch (Exception e) {
            }
        } else {
            txtEndTime.setText("End Time");
            txtEndTime.setForeground(new Color(153, 153, 153));
        }
    }

    private void getTheatre() {
        if (cbSelectMovie.getSelectedIndex() != 0) {
            String selectedMovie = "" + cbSelectMovie.getSelectedItem();
            if (selectedMovie.contains("4DX")) {
                cbSelectTheatre.removeAllItems();
                cbSelectTheatre.addItem("   Select Theatre");
                cbSelectTheatre.addItem("   4DX");
                cbSelectTheatre.setSelectedIndex(1);
            } else {
                cbSelectTheatre.removeAllItems();
                cbSelectTheatre.addItem("   Select Theatre");
                cbSelectTheatre.addItem("   VIP");
                cbSelectTheatre.addItem("   Theatre 2");
                cbSelectTheatre.addItem("   Theatre 3");
                cbSelectTheatre.addItem("   Theatre 4");
                cbSelectTheatre.addItem("   Theatre 5");
                cbSelectTheatre.addItem("   Theatre 6");
                cbSelectTheatre.addItem("   Theatre 7");
            }
        } else {
            cbSelectTheatre.removeAllItems();
            cbSelectTheatre.addItem("   Select Theatre");
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CreateSchedule.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CreateSchedule.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CreateSchedule.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CreateSchedule.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CreateSchedule().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnListMovie;
    private javax.swing.JButton btnListMovie2;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnSelectDate;
    private widecombobox.WideComboBox cbSelectMovie;
    private javax.swing.JComboBox<String> cbSelectPromotion;
    private javax.swing.JComboBox<String> cbSelectTheatre;
    private javax.swing.JComboBox<String> cbSelectTime;
    private javax.swing.JScrollPane jScrollPane1;
    private tableformajorcineplex.TableForMajorCineplex table;
    private textfieldformajorcineplex.TextFieldForMajorCineplex txtEndTime;
    private javax.swing.JTextField txtShowDate;
    private javax.swing.JTextField txtscID;
    private javax.swing.JTextField txttimeid;
    // End of variables declaration//GEN-END:variables
}
